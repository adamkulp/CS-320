Q: How can I ensure that my code, program, or software is functional and secure?

A: It is important to understand that code being functional and code being secure are two totally different aspects of development. We can determine proper functionality of code by way of a variety of testing such as basic functionality testing, unit testing and single user performance testing among other possibilities and also through code review and static code analysis. Ensuring that code is secure on the other hand is ensuring that weaknessess have been avoided that could lead to security-related vulnerabilities. For security purposes its best to implement risk mitigation techniques such as privileged access, ensure that no data leak occurs during transmission of data and the use of encryption and protection against tampering or stealing of data is also important. It is also important to establish a secure coding standard when developing a program. This standard may vary slightly between programs but the same general ideas will apply that the entire team will need to enforce and adhere to the standard setforth for the project. A few of the cookie cutter or default coding standards could be restricted access, encrypted communication channels, all passwords, certificates and keys need to be properly stored and protected and file, database and data element encryption needs to be implemented.   



Q: How do I interpret user needs and incorporate them into a program?

A: It important when working with a client to first identify their needs by understanding as much as possible the users' specific wants, ideas and aspirations for the project; as well as all of their work and any context for the program (ie. what is expected that this program do). Once all of these needs are clearly identified, it becomes of utmost importance to build upon the needs identified by producing a set of requirements. A requirement is intended to specify what a product should do or how it should perform. Traditionally two types of requirements exist one being functional requirements which specify what a system should do specifically and non-functional requirements which specify constraints on a system or its development. On a broader spectrum many categories are considered when thinking about requirements such as usability requirements, user requirements, data requirements and environmental requirements. It's also important to understand that the data gathering stage can often be quite a bit more extensive than perceived; data can be collected from document identification and study, focus groups and workshops, interviews, observation, questionnaires among other means. Once this data has been gathered and verified, it must be interpretted and analyzed to aid in the development of requirements.   



Q: How do I approach designing software?

A: I believe that it's extremely important when approaching software design to consider all best practices in an effort to create a finished product that not only looks polished fundamentally (with correct syntax, format and commenting) but also something that works and works well as intended by the specific needs of the client. When approaching software design I find it imperative to execute a good design, utilize flow charts and user stories in an effort to identify explicit details for requirements, come to the realization that requirements will almost always change as the project progresses, practice code modularity, abstract interface from algorithms and remember that part of the goal is to keep it simple and clean. 

